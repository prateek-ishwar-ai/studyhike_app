"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Star, Target, Trophy, Calendar, Quote, Heart, Zap, Loader, BookOpen, TrendingUp } from "lucide-react"
import { supabase } from "@/lib/supabase/client"
import { useRouter } from "next/navigation"
import { toast } from "@/components/ui/use-toast"

// Define interfaces for our data
interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: JSX.Element;
  earned: boolean;
  date?: string;
}

interface Goal {
  title: string;
  dueDate: string;
  progress: number;
}

interface Quote {
  text: string;
  author: string;
}

export default function MotivationPage() {
  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0)
  const [achievements, setAchievements] = useState<Achievement[]>([])
  const [motivationalQuotes, setMotivationalQuotes] = useState<Quote[]>([])
  const [goals, setGoals] = useState<Goal[]>([])
  const [loading, setLoading] = useState(true)
  const router = useRouter()

  useEffect(() => {
    async function fetchMotivationData() {
      try {
        setLoading(true)

        if (!supabase) {
          console.error("Supabase client not initialized")
          setLoading(false)
          return
        }

        // Get current user
        const { data: { user }, error: userError } = await supabase.auth.getUser()
        
        if (userError || !user) {
          console.error("Authentication error:", userError)
          router.push('/auth/login')
          return
        }

        // Fetch student data
        const { data: studentData, error: studentError } = await supabase
          .from('students')
          .select('*')
          .eq('id', user.id)
          .maybeSingle()

        if (studentError) {
          console.error("Student data error:", studentError)
        }

        // Fetch homework data to calculate achievements
        const { data: homeworkData, error: homeworkError } = await supabase
          .from('homework')
          .select('*')
          .eq('student_id', user.id)

        if (homeworkError) {
          console.error("Homework data error:", homeworkError)
        }

        // Fetch test data to calculate achievements
        const { data: testData, error: testError } = await supabase
          .from('tests')
          .select('*')
          .eq('student_id', user.id)

        if (testError) {
          console.error("Test data error:", testError)
        }

        // Generate achievements based on the data
        const generatedAchievements: Achievement[] = []

        // Study streak achievement
        if (studentData && studentData.study_streak >= 7) {
          generatedAchievements.push({
            id: "streak",
            title: "Study Streak Master",
            description: `Studied for ${studentData.study_streak} consecutive days`,
            icon: <Zap className="h-6 w-6 text-yellow-600" />,
            earned: true,
            date: new Date().toISOString().split('T')[0] // Today's date
          })
        } else {
          generatedAchievements.push({
            id: "streak",
            title: "Study Streak Master",
            description: "Study for 7 consecutive days",
            icon: <Zap className="h-6 w-6 text-gray-400" />,
            earned: false
          })
        }

        // High score achievement
        const highScoreTest = testData?.find(test => (test.score / test.max_score) * 100 >= 90)
        if (highScoreTest) {
          generatedAchievements.push({
            id: "highscore",
            title: `${highScoreTest.subject} Champion`,
            description: `Scored above 90% in ${highScoreTest.subject} test`,
            icon: <Trophy className="h-6 w-6 text-amber-600" />,
            earned: true,
            date: new Date(highScoreTest.created_at).toISOString().split('T')[0]
          })
        } else {
          generatedAchievements.push({
            id: "highscore",
            title: "Subject Champion",
            description: "Score above 90% in any test",
            icon: <Trophy className="h-6 w-6 text-gray-400" />,
            earned: false
          })
        }

        // Homework completion achievement
        if (homeworkData && homeworkData.length >= 5) {
          const completedHomework = homeworkData.filter(hw => 
            hw.status === 'submitted' || hw.status === 'reviewed')
          
          if (completedHomework.length >= 5) {
            generatedAchievements.push({
              id: "homework",
              title: "Homework Hero",
              description: "Completed 5 homework assignments",
              icon: <Star className="h-6 w-6 text-purple-600" />,
              earned: true,
              date: new Date().toISOString().split('T')[0]
            })
          }
        } else {
          generatedAchievements.push({
            id: "homework",
            title: "Homework Hero",
            description: "Complete 5 homework assignments",
            icon: <Star className="h-6 w-6 text-gray-400" />,
            earned: false
          })
        }

        // Add more achievements
        generatedAchievements.push({
          id: "dedication",
          title: "Dedicated Learner",
          description: "Spend 50+ hours studying",
          icon: <Calendar className="h-6 w-6 text-blue-600" />,
          earned: studentData && studentData.total_study_hours >= 50,
          date: studentData && studentData.total_study_hours >= 50 ? 
            new Date().toISOString().split('T')[0] : undefined
        })

        generatedAchievements.push({
          id: "allsubjects",
          title: "Well-Rounded Student",
          description: "Score above 80% in all three subjects",
          icon: <BookOpen className="h-6 w-6 text-green-600" />,
          earned: false
        })

        setAchievements(generatedAchievements)

        // Set motivational quotes - these could be from the database too
        setMotivationalQuotes([
          {
            text: "Success is the sum of small efforts repeated day in and day out.",
            author: "Robert Collier",
          },
          {
            text: "The expert in anything was once a beginner.",
            author: "Helen Hayes",
          },
          {
            text: "Don't watch the clock; do what it does. Keep going.",
            author: "Sam Levenson",
          },
          {
            text: "Success is not final, failure is not fatal: it is the courage to continue that counts.",
            author: "Winston Churchill",
          },
          {
            text: "The way to get started is to quit talking and begin doing.",
            author: "Walt Disney",
          },
        ])
        
        // Set goals - these could be from the database in a real implementation
        setGoals([
          {
            title: "Complete Physics module",
            dueDate: "2024-06-15",
            progress: 75,
          },
          {
            title: "Improve Mathematics test score",
            dueDate: "2024-06-20",
            progress: 60,
          },
          {
            title: "Submit all Chemistry homework",
            dueDate: "2024-06-30",
            progress: 40,
          },
        ])

      } catch (error) {
        console.error("Error fetching motivation data:", error)
        toast({
          title: "Error",
          description: "Failed to load motivation data. Please try again later.",
          variant: "destructive"
        })
      } finally {
        setLoading(false)
      }
    }

    fetchMotivationData()
  }, [router])

  if (loading) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <Loader className="h-8 w-8 animate-spin mb-4" />
        <p>Loading your motivation data...</p>
      </div>
    )
  }

  const handleNextQuote = () => {
    setCurrentQuoteIndex((prevIndex) =>
      prevIndex === motivationalQuotes.length - 1 ? 0 : prevIndex + 1
    )
  }

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Motivation Dashboard</h1>
        <p className="text-gray-600 mt-1">Track your progress and stay motivated on your JEE journey</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {/* Daily Quote */}
        <Card className="md:col-span-3">
          <CardContent className="pt-6">
            <div className="flex flex-col items-center text-center p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg">
              <Quote className="h-8 w-8 text-purple-500 mb-4" />
              <p className="text-xl font-medium text-gray-800 mb-2">"{motivationalQuotes[currentQuoteIndex].text}"</p>
              <p className="text-gray-500 mb-4">â€” {motivationalQuotes[currentQuoteIndex].author}</p>
              <Button variant="outline" onClick={handleNextQuote}>
                Next Quote
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Achievements */}
        <Card className="md:col-span-2">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Trophy className="mr-2 h-5 w-5 text-amber-500" />
              Achievements
            </CardTitle>
            <CardDescription>Milestones and badges you've earned</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {achievements.map((achievement) => (
                <div
                  key={achievement.id}
                  className={`flex items-center p-3 rounded-lg border ${
                    achievement.earned
                      ? "bg-green-50 border-green-200"
                      : "bg-gray-50 border-gray-200"
                  }`}
                >
                  <div className="mr-4">{achievement.icon}</div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{achievement.title}</h4>
                    <p className="text-sm text-gray-600">{achievement.description}</p>
                  </div>
                  <div className="ml-2 flex flex-col items-end">
                    {achievement.earned ? (
                      <>
                        <Badge className="bg-green-500 hover:bg-green-600">Earned</Badge>
                        {achievement.date && (
                          <span className="text-xs text-gray-500 mt-1">{achievement.date}</span>
                        )}
                      </>
                    ) : (
                      <Badge variant="outline" className="text-gray-500 border-gray-300">
                        Locked
                      </Badge>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Goals */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Target className="mr-2 h-5 w-5 text-blue-500" />
              Study Goals
            </CardTitle>
            <CardDescription>Track your progress toward key objectives</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {goals.map((goal, index) => (
                <div key={index} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium text-gray-900">{goal.title}</h4>
                    <span className="text-xs text-gray-500">Due: {goal.dueDate}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div
                      className="bg-blue-600 h-2.5 rounded-full"
                      style={{ width: `${goal.progress}%` }}
                    ></div>
                  </div>
                  <div className="text-right text-sm text-gray-600">{goal.progress}% complete</div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}